//Q1. Write a program to find all pairs of an integer array whose sum is equal to a given number?

function mjProgOne(arr,sumVal){
    let count=0;
    for(let i=0;i<arr.length-1;i++)
    {
        for(let j=i+1;j<arr.length;j++){
            if((arr[i]+arr[j])==sumVal)
            {
                count++;
                console.log(`sum of value ${arr[i]} and ${arr[j]}=${sumVal}`);
            }
        }
    }
    if(count==0)
    {
        console.log("There are no such pairs");
    }
}
//Test
mjProgOne([1,2,3,4,5,6],7);

mjProgOne([1,2,3,4,5,6],17);


console.log("=================End of PROGRAM ONE=============");

// Q2. Write a program to reverse an array in place? In place means you cannot create a new array. You have to update the original array.

function mjProgTwo(arr){
    console.log(`Array before reversing : ${arr}`);
    let len=arr.length;
    for(let i=0;i<len/2;i++)
    {
        let temp=arr[i];
        arr[i]=arr[len-i-1];
        arr[len-i-1]=temp;
    }
    console.log(`Array after reversing : ${arr}`);
}
//Test
mjProgTwo([1,2,3,9,4,5,8,6,7]);


console.log("=================End of PROGRAM TWO=============");

// Q3. Write a program to check if two strings are a rotation of each other?

function mjProgThree(string1,string2)
{
    if(string1.length!=string2.length){
        console.log("The given string are not rotation of each other");
    }
    else{
        let stringSum=string2+string2;
        if(stringSum.includes(string1))
        {
            console.log("The given strings are rotations of each other");
        }
        else{
            console.log("The given strings are not rotations of each other");}

        }
}
//Test
mjProgThree("Helol","elloH");
mjProgThree("Hello","elloH");


console.log("=================End of PROGRAM THREE=============");



// Q4. Write a program to print the first non-repeated character from a string?

function mjProgFour(str)
{
    let ch;
    let state=false;
    for(let i=0;i<str.length-1;i++)
    {
        if(str.indexOf(str[i])===str.lastIndexOf(str[i])){
            ch=str[i];
            state=true;
            break;
        }
    }
    if(ch===undefined)
    {
        console.log(`There is no such character`);
    }
    else{
        console.log(`The first Non-repeating character is ${ch}`);
    }
    return ch
}
mjProgFour("ilili");
mjProgFour("Kuchbee");

console.log("=================End of PROGRAM FOUR=============");

// Q5. Read about the Tower of Hanoi algorithm. Write a program to implement it.

function mjProgFive(source_stack, destination_stack, intermediate_stack, n) {

    // base conditon
    if (n <= 0) {
        return
    }

    mjProgFive(source_stack, intermediate_stack, destination_stack, n - 1)

    console.log(`Move Disk-${n} FROM ${source_stack} TO ${destination_stack}`);

    mjProgFive(intermediate_stack, destination_stack, source_stack, n - 1);
}

mjProgFive('source_stack', 'destination_stack', 'intermediate', 3)

console.log("=================End of PROGRAM FIVE=============");



console.clear()
// Q6. Read about infix, prefix, and postfix expressions. Write a program to convert postfix to prefix expression.

class StackNode
{
	constructor(data, top)
	{
		this.data = data;
		this.next = top;
	}
}
class MyStack
{
	constructor()
	{
		this.top = null;
		this.count = 0;
	}
	// Returns the number of element in stack
	size()
	{
		return this.count;
	}
	isEmpty()
	{
		if (this.size() > 0)
		{
			return false;
		}
		else
		{
			return true;
		}
	}
	// Add a new element in stack
	push(data)
	{
		// Make a new stack node
		// And set as top
		this.top = new StackNode(data, this.top);
		// Increase node value
		this.count++;
	}
	// Add a top element in stack
	pop()
	{
		var temp = "";
		if (this.isEmpty() == false)
		{
			// Get remove top value
			temp = this.top.data;
			this.top = this.top.next;
			// Reduce size
			this.count--;
		}
		return temp;
	}
	// Used to get top element of stack
	peek()
	{
		if (!this.isEmpty())
		{
			return this.top.data;
		}
		else
		{
			return "";
		}
	}
}
class Conversion
{
	// Check operator
	isOperator(text)
	{
		if (text == '+' || text == '-' || 
            text == '*' || text == '/' || 
            text == '^' || text == '%')
		{
			return true;
		}
		return false;
	}
	// Check operands
	isOperands(text)
	{
		if ((text >= '0' && text <= '9') || 
            (text >= 'a' && text <= 'z') || 
            (text >= 'A' && text <= 'Z'))
		{
			return true;
		}
		return false;
	}
	// Converting the given postfix expression to 
	// prefix expression
	postfixToPrefix(postfix)
	{
		// Get the size
		var size = postfix.length;
		// Create stack object
		var s = new MyStack();
		// Some useful variables which is using 
		// of to storing current result
		var auxiliary = "";
		var isValid = true;
		for (var i = 0; i < size && isValid; i++)
		{
			// Check whether given postfix location
			// at [i] is an operator or not
			if (this.isOperator(postfix.charAt(i)))
			{
				// When operator exist
				// Check that two operands exist or not
				if (s.size() > 1)
				{
					auxiliary = s.pop();
					auxiliary = s.pop() + auxiliary;
					auxiliary = postfix.charAt(i) + auxiliary;
					s.push(auxiliary);
				}
				else
				{
					isValid = false;
				}
			}
			else if (this.isOperands(postfix.charAt(i)))
			{
				// When get valid operands
				auxiliary = postfix.charAt(i);
				s.push(auxiliary);
			}
			else
			{
				// Invalid operands or operator
				isValid = false;
			}
		}
		if (isValid == false)
		{
			// When have something wrong
			console.log("Invalid postfix : " + postfix);
		}
		else
		{
			// Display calculated result
			console.log(" Postfix : " + postfix);
			console.log(" Prefix  : " + s.pop());
		}
	}
}

function main()
{
	var task = new Conversion();
	var postfix = "ab+c*ef+g/+";
	task.postfixToPrefix(postfix);
	postfix = "abc*de-/+";
	task.postfixToPrefix(postfix);
}
// Start program execution
main();
console.log("=================End of PROGRAM SIX=============");
// Q7. Write a program to convert prefix expression to infix expression.
// Stack Node
class StackNode
{
	constructor(data, top)
	{
		this.data = data;
		this.next = top;
	}
}
class MyStack
{
	constructor()
	{
		this.top = null;
		this.count = 0;
	}
	// Returns the number of element in stack
	size()
	{
		return this.count;
	}
	isEmpty()
	{
		if (this.size() > 0)
		{
			return false;
		}
		else
		{
			return true;
		}
	}
	// Add a new element in stack
	push(data)
	{
		// Make a new stack node
		// And set as top
		this.top = new StackNode(data, this.top);
		// Increase node value
		this.count++;
	}
	// Add a top element in stack
	pop()
	{
		var temp = "";
		if (this.isEmpty() == false)
		{
			// Get remove top value
			temp = this.top.data;
			this.top = this.top.next;
			// Reduce size
			this.count--;
		}
		return temp;
	}
	// Used to get top element of stack
	peek()
	{
		if (!this.isEmpty())
		{
			return this.top.data;
		}
		else
		{
			return "";
		}
	}
}
class Conversion
{
	// Check operator
	isOperator(text)
	{
		if (text == '+' || text == '-' || 
            text == '*' || text == '/' || 
            text == '^' || text == '%')
		{
			return true;
		}
		return false;
	}
	// Check operands
	isOperands(text)
	{
		if ((text >= '0' && text <= '9') || 
            (text >= 'a' && text <= 'z') || 
            (text >= 'A' && text <= 'Z'))
		{
			return true;
		}
		return false;
	}
	// Converting the given prefix expression to 
	// infix expression
	prefixToinfix(prefix)
	{
		// Get the size
		var size = prefix.length;
		// Create stack object
		var s = new MyStack();
		// Some useful variables which is using 
		// of to storing current result
		var auxiliary = "";
		var op1 = "";
		var op2 = "";
		var isValid = true;
		for (var i = size - 1; i >= 0; i--)
		{
			// Check whether given prefix location
			// at [i] is an operator or not
			if (this.isOperator(prefix.charAt(i)))
			{
				// When operator exist
				// Check that two operands exist or not
				if (s.size() > 1)
				{
					op1 = s.pop();
					op2 = s.pop();
					auxiliary = "(" + op1 + prefix.charAt(i) + op2 + ")";
					// Add into stack
					s.push(auxiliary);
				}
				else
				{
					isValid = false;
				}
			}
			else if (this.isOperands(prefix.charAt(i)))
			{
				// When get valid operands
				auxiliary = "" + prefix.charAt(i);
				// Add into stack
				s.push(auxiliary);
			}
			else
			{
				// Invalid operands or operator
				isValid = false;
			}
		}
		if (isValid == false)
		{
			// When have something wrong
			console.log("Invalid Prefix : " + prefix);
		}
		else
		{
			// Display calculated result
			console.log(" Prefix : " + prefix);
			console.log(" Infix  : " + s.pop());
		}
	}
}

function main()
{
	var task = new Conversion();
	var prefix = "+*ab^cd";
	task.prefixToinfix(prefix);
	prefix = "-+*^%adcex*y^ab";
	task.prefixToinfix(prefix);
}
// Start program execution
main();




// Q8. Write a program to check if all the brackets are closed in a given code snippet.
/*
  Node Js Program
  Check Balanced parentheses using Stack
*/
//Stack Node
class Node {
	constructor(data) {
		this.data = data;
		this.next = null;
	}
}
class MyStack {
	constructor() {
		this.top = null;
	}

	//Add a new element in stack
	push(data) {
		//Make a new stack node
		var new_node = new Node(data);
		if (new_node != null) {
			new_node.next = this.top;
			this.top = new_node;
		} else {
			process.stdout.write("Memory overflow\n");
		}
	}

	//Add a top element in stack
	pop() {
		if (this.top != null) {
			this.top = this.top.next;
		}
	}
	parentheses(str, size) {
		var status = true;
		for (var i = 0; i < size &&
			status == true; ++i) {
			if (str[i] == '{' ||
				str[i] == '[' ||
				str[i] == '(') {
				//Add stack element
				this.push(str[i]);
			} else
			if (this.top != null) {
				if ((str[i] == '}' &&
						this.top.data == '{') ||
					(str[i] == ']' &&
						this.top.data == '[') ||
					(str[i] == ')' &&
						this.top.data == '(')) {
					//Remove a stack element
					this.pop();
				} else {
					//If in case parentheses are not Balanced
					status = false;
				}
			} else {
				status = false;
			}
		}

		if (status == true &&
			this.top == null) {
			process.stdout.write("\nBalanced\n");
		} else {
			process.stdout.write("\nNot Balanced\n");
		}

		//In case stack are not empty
		//Then remove its elements
		while (this.top != null) {
			this.pop();
		}
	}
}

function main(args) {
	var obj = new MyStack();
	var str = "[()]{}{[()()]()}";
	process.stdout.write(str);
	obj.parentheses(str, str.length);
	str = "(())[](){}{}[{]}";
	process.stdout.write(str);
	obj.parentheses(str, str.length);
}

main();




// Q9. Write a program to reverse a stack.

// Stack node
class StackNode
{
    constructor(element, next)
    {
        this.element = element;
        this.next = next;
    }
}
// Define a custom stack
class MyStack
{
    constructor()
    {
        this.top = null;
        this.size = 0;
    }
    // Add node at the top of stack
    push(element)
    {
        this.top = new StackNode(element, this.top);
        this.size++;
    }
    isEmpty()
    {
        if (this.size > 0 && this.top != null)
        {
            return false;
        }
        else
        {
            return true;
        }
    }
    // Remove top element of stack
    pop()
    {
        if (this.size > 0 && this.top != null)
        {
            var temp = this.top;
            // Change top element of stack
            this.top = temp.next;
            this.size--;
        }
    }
    // Return top element of stack
    peek()
    {
        return this.top.element;
    }
}
class ReverseString
{
    // Reverse the string element
    reverse(text)
    {
        var size = text.length;
        // Auxiliary variable which is used to store result of string
        var result = "";
        // Create an stack
        var stack = new MyStack();
        // Add element into stack
        for (var i = 0; i < size; i++)
        {
            // Add element into stack
            stack.push(text.charAt(i));
        }
        // iterating the stack elements until if not empty
        while (stack.isEmpty() == false)
        {
            // Get top element
            result += stack.peek();
            // Remove current top
            stack.pop();
        }
        return result;
    }
}

function main()
{
    var task = new ReverseString();
    var text = "This is a simple words";
    process.stdout.write(" Before Reverse : [" + text + "]");
    text = task.reverse(text);
    process.stdout.write("\n After Reverse : [" + text + "]");
    text = " ABC";
    process.stdout.write("\n Before Reverse : [" + text + "]");
    text = task.reverse(text);
    process.stdout.write("\n After Reverse : [" + text + "]");
    text = "BIG WIN";
    process.stdout.write("\n Before Reverse : [" + text + "]");
    text = task.reverse(text);
    process.stdout.write("\n After Reverse : [" + text + "]");
    text = "BIG DOG";
    process.stdout.write("\n Before Reverse : [" + text + "]");
    text = task.reverse(text);
    process.stdout.write("\n After Reverse : [" + text + "]");
}
main();

// Q10. Write a program to find the smallest number using a stack.


class Stack{
    constructor(){
        this.item=[];
        this.length=0;
        this.push=(element)=>{
            this.item.push(element);
            this.length+=1;
        }
        this.pop=()=>{
            if(this.length==0)
            {
                return "underflow";
            }
            else{
                this.item.pop();
                this.length-=1;
            }
        }
        this.peek=()=>{
            return this.item[this.length-1];
        }
    }
    
}
let stack =new Stack();
let numberList=[35,15,7,85,3,27];
for(let i=0;i<numberList.length-1;i++){
    stack.push(numberList[i]);
}
let minimum=stack.peek();
while(stack.length){
    let x=stack.peek();
    if(x<minimum)
    {
        minimum=x;
    }
    stack.pop();
}
console.log(minimum);
